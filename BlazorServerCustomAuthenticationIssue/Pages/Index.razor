@page "/"
@using Blazor.Services
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject LoginService _loginService
<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<button @onclick="LogUsername">Log username</button>
<br/>

<SurveyPrompt Title="How is Blazor working for you?" />
<AuthorizeView>
    <Authorized>
       <button class="btn btn-primary" @onclick="Logout">Logout</button>
    </Authorized>
    <NotAuthorized>
        <button class="btn btn-primary" @onclick="Login">Login</button>
    </NotAuthorized>
</AuthorizeView>

<h3>ClaimsPrincipal Data</h3>

<button @onclick="GetClaimsPrincipalData">Get ClaimsPrincipal Data</button>

<p>@_authMessage</p>

@if (_claims.Count() > 0)
{
    <ul>
        @foreach (var claim in _claims)
        {
            <li>@claim.Type: @claim.Value</li>
        }
    </ul>
}

<p>@_surnameMessage</p>

@code{

     private string _authMessage;
    private string _surnameMessage;
    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }


    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    private async void Login()
    {
        await _loginService.Login("user1","password1");
    }

    private async void Logout()
    {
        await _loginService.Logout();
    }

     private async Task GetClaimsPrincipalData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            _authMessage = $"{user.Identity.Name} is authenticated.";
            _claims = user.Claims;
            _surnameMessage = 
                $"Surname: {user.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value}";
        }
        else
        {
            _authMessage = "The user is NOT authenticated.";
        }
    }

    private async Task LogUsername()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            _authMessage = $"{user.Identity.Name} is authenticated.";
        }
        else
        {
            _authMessage = "The user is NOT authenticated.";
        }
    }
}